// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: stream.proto

package streaming

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// HelloYARPCClient is the YARPC client-side interface for the Hello service.
type HelloYARPCClient interface {
	HelloUnary(context.Context, *HelloRequest, ...yarpc.CallOption) (*HelloResponse, error)
	HelloOutStream(context.Context, ...yarpc.CallOption) (HelloServiceHelloOutStreamYARPCClient, error)
	HelloInStream(context.Context, *HelloRequest, ...yarpc.CallOption) (HelloServiceHelloInStreamYARPCClient, error)
	HelloThere(context.Context, ...yarpc.CallOption) (HelloServiceHelloThereYARPCClient, error)
}

// HelloServiceHelloOutStreamYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type HelloServiceHelloOutStreamYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*HelloResponse, error)
}

// HelloServiceHelloInStreamYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type HelloServiceHelloInStreamYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// HelloServiceHelloThereYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type HelloServiceHelloThereYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

func newHelloYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) HelloYARPCClient {
	return &_HelloYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.internal.examples.streaming.Hello",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewHelloYARPCClient builds a new YARPC client for the Hello service.
func NewHelloYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) HelloYARPCClient {
	return newHelloYARPCClient(clientConfig, nil, options...)
}

// HelloYARPCServer is the YARPC server-side interface for the Hello service.
type HelloYARPCServer interface {
	HelloUnary(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloOutStream(HelloServiceHelloOutStreamYARPCServer) (*HelloResponse, error)
	HelloInStream(*HelloRequest, HelloServiceHelloInStreamYARPCServer) error
	HelloThere(HelloServiceHelloThereYARPCServer) error
}

// HelloServiceHelloOutStreamYARPCServer receives HelloRequests.
type HelloServiceHelloOutStreamYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
}

// HelloServiceHelloInStreamYARPCServer sends HelloResponses.
type HelloServiceHelloInStreamYARPCServer interface {
	Context() context.Context
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

// HelloServiceHelloThereYARPCServer receives HelloRequests and sends HelloResponse.
type HelloServiceHelloThereYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

type buildHelloYARPCProceduresParams struct {
	Server      HelloYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildHelloYARPCProcedures(params buildHelloYARPCProceduresParams) []transport.Procedure {
	handler := &_HelloYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.internal.examples.streaming.Hello",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "HelloUnary",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.HelloUnary,
							NewRequest:  newHelloServiceHelloUnaryYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HelloThere",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloThere,
						},
					),
				},

				{
					MethodName: "HelloInStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloInStream,
						},
					),
				},

				{
					MethodName: "HelloOutStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloOutStream,
						},
					),
				},
			},
		},
	)
}

// BuildHelloYARPCProcedures prepares an implementation of the Hello service for YARPC registration.
func BuildHelloYARPCProcedures(server HelloYARPCServer) []transport.Procedure {
	return buildHelloYARPCProcedures(buildHelloYARPCProceduresParams{Server: server})
}

// FxHelloYARPCClientParams defines the input
// for NewFxHelloYARPCClient. It provides the
// paramaters to get a HelloYARPCClient in an
// Fx application.
type FxHelloYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxHelloYARPCClientResult defines the output
// of NewFxHelloYARPCClient. It provides a
// HelloYARPCClient to an Fx application.
type FxHelloYARPCClientResult struct {
	fx.Out

	Client HelloYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxHelloYARPCClient provides a HelloYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    streaming.NewFxHelloYARPCClient("service-name"),
//    ...
//  )
func NewFxHelloYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxHelloYARPCClientParams) FxHelloYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxHelloYARPCClientResult{
			Client: newHelloYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxHelloYARPCProceduresParams defines the input
// for NewFxHelloYARPCProcedures. It provides the
// paramaters to get HelloYARPCServer procedures in an
// Fx application.
type FxHelloYARPCProceduresParams struct {
	fx.In

	Server      HelloYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxHelloYARPCProceduresResult defines the output
// of NewFxHelloYARPCProcedures. It provides
// HelloYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxHelloYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxHelloYARPCProcedures provides HelloYARPCServer procedures to an Fx application.
// It expects a HelloYARPCServer to be present in the container.
//
//  fx.Provide(
//    streaming.NewFxHelloYARPCProcedures(),
//    ...
//  )
func NewFxHelloYARPCProcedures() interface{} {
	return func(params FxHelloYARPCProceduresParams) FxHelloYARPCProceduresResult {
		return FxHelloYARPCProceduresResult{
			Procedures: buildHelloYARPCProcedures(buildHelloYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.yarpc.internal.examples.streaming.Hello",
				FileDescriptors: yarpcFileDescriptorClosurebb17ef3f514bfe54,
			},
		}
	}
}

type _HelloYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_HelloYARPCCaller) HelloUnary(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (*HelloResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "HelloUnary", request, newHelloServiceHelloUnaryYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloUnaryYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloYARPCCaller) HelloOutStream(ctx context.Context, options ...yarpc.CallOption) (HelloServiceHelloOutStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloOutStream", options...)
	if err != nil {
		return nil, err
	}
	return &_HelloServiceHelloOutStreamYARPCClient{stream: stream}, nil
}

func (c *_HelloYARPCCaller) HelloInStream(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (HelloServiceHelloInStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloInStream", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_HelloServiceHelloInStreamYARPCClient{stream: stream}, nil
}

func (c *_HelloYARPCCaller) HelloThere(ctx context.Context, options ...yarpc.CallOption) (HelloServiceHelloThereYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloThere", options...)
	if err != nil {
		return nil, err
	}
	return &_HelloServiceHelloThereYARPCClient{stream: stream}, nil
}

type _HelloYARPCHandler struct {
	server HelloYARPCServer
}

func (h *_HelloYARPCHandler) HelloUnary(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *HelloRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*HelloRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHelloServiceHelloUnaryYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.HelloUnary(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HelloYARPCHandler) HelloOutStream(serverStream *protobuf.ServerStream) error {
	response, err := h.server.HelloOutStream(&_HelloServiceHelloOutStreamYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_HelloYARPCHandler) HelloInStream(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newHelloServiceHelloInStreamYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return protobuf.CastError(emptyHelloServiceHelloInStreamYARPCRequest, requestMessage)
	}
	return h.server.HelloInStream(request, &_HelloServiceHelloInStreamYARPCServer{serverStream: serverStream})
}

func (h *_HelloYARPCHandler) HelloThere(serverStream *protobuf.ServerStream) error {
	return h.server.HelloThere(&_HelloServiceHelloThereYARPCServer{serverStream: serverStream})
}

type _HelloServiceHelloOutStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_HelloServiceHelloOutStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloOutStreamYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_HelloServiceHelloOutStreamYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newHelloServiceHelloOutStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloOutStreamYARPCResponse, responseMessage)
	}
	return response, err
}

type _HelloServiceHelloInStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_HelloServiceHelloInStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloInStreamYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newHelloServiceHelloInStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloInStreamYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloServiceHelloInStreamYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _HelloServiceHelloThereYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_HelloServiceHelloThereYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloThereYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_HelloServiceHelloThereYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newHelloServiceHelloThereYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloThereYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloServiceHelloThereYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _HelloServiceHelloOutStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_HelloServiceHelloOutStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloOutStreamYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newHelloServiceHelloOutStreamYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloOutStreamYARPCRequest, requestMessage)
	}
	return request, err
}

type _HelloServiceHelloInStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_HelloServiceHelloInStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloInStreamYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _HelloServiceHelloThereYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_HelloServiceHelloThereYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloThereYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newHelloServiceHelloThereYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloThereYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_HelloServiceHelloThereYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newHelloServiceHelloUnaryYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloUnaryYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloThereYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloThereYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloOutStreamYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloOutStreamYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloInStreamYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloInStreamYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyHelloServiceHelloUnaryYARPCRequest      = &HelloRequest{}
	emptyHelloServiceHelloUnaryYARPCResponse     = &HelloResponse{}
	emptyHelloServiceHelloThereYARPCRequest      = &HelloRequest{}
	emptyHelloServiceHelloThereYARPCResponse     = &HelloResponse{}
	emptyHelloServiceHelloOutStreamYARPCRequest  = &HelloRequest{}
	emptyHelloServiceHelloOutStreamYARPCResponse = &HelloResponse{}
	emptyHelloServiceHelloInStreamYARPCRequest   = &HelloRequest{}
	emptyHelloServiceHelloInStreamYARPCResponse  = &HelloResponse{}
)

var yarpcFileDescriptorClosurebb17ef3f514bfe54 = [][]byte{
	// stream.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
		0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x2b, 0x4d, 0x4a, 0x2d, 0xd2, 0xab,
		0x4c, 0x2c, 0x2a, 0x48, 0xd6, 0xcb, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x4b, 0xad,
		0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x83, 0x28, 0xcd, 0xcc, 0x4b, 0x57, 0x92, 0xe3, 0xe2,
		0xf1, 0x48, 0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62,
		0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x51, 0x92, 0xe7, 0xe2,
		0x85, 0xca, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0xa2, 0x2b, 0x30, 0xea, 0x61, 0xe1, 0x62, 0x05,
		0xab, 0x10, 0xaa, 0xe6, 0xe2, 0x02, 0x33, 0x42, 0xf3, 0x12, 0x8b, 0x2a, 0x85, 0x4c, 0xf4, 0x88,
		0x73, 0x81, 0x1e, 0xb2, 0xf5, 0x52, 0xa6, 0x24, 0xea, 0x82, 0x38, 0x4a, 0x89, 0x41, 0xa8, 0x1e,
		0x6a, 0x79, 0x48, 0x46, 0x6a, 0x51, 0x2a, 0x9d, 0x2d, 0xd7, 0x60, 0x34, 0x60, 0x14, 0x6a, 0x64,
		0xe4, 0xe2, 0x03, 0x8b, 0xfb, 0x97, 0x96, 0x04, 0x83, 0x55, 0xd2, 0xdd, 0x15, 0x42, 0x0d, 0x8c,
		0xd0, 0xd8, 0xf2, 0xcc, 0x1b, 0x10, 0x27, 0x18, 0x30, 0x3a, 0x71, 0x47, 0x71, 0xc2, 0xa5, 0x93,
		0xd8, 0xc0, 0x69, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x02, 0xa0, 0xfe, 0x39, 0x9b, 0x02,
		0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) HelloYARPCClient {
			return NewHelloYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}

func init() {

	proto.RegisterType((*HelloRequest)(nil), "uber.yarpc.internal.examples.streaming.HelloRequest")

	proto.RegisterType((*HelloResponse)(nil), "uber.yarpc.internal.examples.streaming.HelloResponse")

}
