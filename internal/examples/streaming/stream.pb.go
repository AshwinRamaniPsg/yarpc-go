// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.5.1
// source: internal/examples/streaming/stream.proto

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package streaming

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_examples_streaming_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_examples_streaming_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_internal_examples_streaming_stream_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_examples_streaming_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_examples_streaming_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_internal_examples_streaming_stream_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_internal_examples_streaming_stream_proto protoreflect.FileDescriptor

var file_internal_examples_streaming_stream_proto_rawDesc = []byte{
	0x0a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x75, 0x62, 0x65, 0x72,
	0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x32, 0x8c, 0x04, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x7b, 0x0a,
	0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x75, 0x62,
	0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0a, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x54, 0x68, 0x65, 0x72, 0x65, 0x12, 0x34, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e,
	0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34,
	0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70,
	0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x80, 0x01, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x34, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79, 0x61, 0x72, 0x70, 0x63, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x75, 0x62, 0x65, 0x72, 0x2e, 0x79,
	0x61, 0x72, 0x70, 0x63, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_examples_streaming_stream_proto_rawDescOnce sync.Once
	file_internal_examples_streaming_stream_proto_rawDescData = file_internal_examples_streaming_stream_proto_rawDesc
)

func file_internal_examples_streaming_stream_proto_rawDescGZIP() []byte {
	file_internal_examples_streaming_stream_proto_rawDescOnce.Do(func() {
		file_internal_examples_streaming_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_examples_streaming_stream_proto_rawDescData)
	})
	return file_internal_examples_streaming_stream_proto_rawDescData
}

var file_internal_examples_streaming_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_internal_examples_streaming_stream_proto_goTypes = []interface{}{
	(*HelloRequest)(nil),  // 0: uber.yarpc.internal.examples.streaming.HelloRequest
	(*HelloResponse)(nil), // 1: uber.yarpc.internal.examples.streaming.HelloResponse
}
var file_internal_examples_streaming_stream_proto_depIdxs = []int32{
	0, // 0: uber.yarpc.internal.examples.streaming.Hello.HelloUnary:input_type -> uber.yarpc.internal.examples.streaming.HelloRequest
	0, // 1: uber.yarpc.internal.examples.streaming.Hello.HelloThere:input_type -> uber.yarpc.internal.examples.streaming.HelloRequest
	0, // 2: uber.yarpc.internal.examples.streaming.Hello.HelloOutStream:input_type -> uber.yarpc.internal.examples.streaming.HelloRequest
	0, // 3: uber.yarpc.internal.examples.streaming.Hello.HelloInStream:input_type -> uber.yarpc.internal.examples.streaming.HelloRequest
	1, // 4: uber.yarpc.internal.examples.streaming.Hello.HelloUnary:output_type -> uber.yarpc.internal.examples.streaming.HelloResponse
	1, // 5: uber.yarpc.internal.examples.streaming.Hello.HelloThere:output_type -> uber.yarpc.internal.examples.streaming.HelloResponse
	1, // 6: uber.yarpc.internal.examples.streaming.Hello.HelloOutStream:output_type -> uber.yarpc.internal.examples.streaming.HelloResponse
	1, // 7: uber.yarpc.internal.examples.streaming.Hello.HelloInStream:output_type -> uber.yarpc.internal.examples.streaming.HelloResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_examples_streaming_stream_proto_init() }
func file_internal_examples_streaming_stream_proto_init() {
	if File_internal_examples_streaming_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_examples_streaming_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_examples_streaming_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_examples_streaming_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_examples_streaming_stream_proto_goTypes,
		DependencyIndexes: file_internal_examples_streaming_stream_proto_depIdxs,
		MessageInfos:      file_internal_examples_streaming_stream_proto_msgTypes,
	}.Build()
	File_internal_examples_streaming_stream_proto = out.File
	file_internal_examples_streaming_stream_proto_rawDesc = nil
	file_internal_examples_streaming_stream_proto_goTypes = nil
	file_internal_examples_streaming_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	HelloUnary(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	HelloThere(ctx context.Context, opts ...grpc.CallOption) (Hello_HelloThereClient, error)
	HelloOutStream(ctx context.Context, opts ...grpc.CallOption) (Hello_HelloOutStreamClient, error)
	HelloInStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_HelloInStreamClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) HelloUnary(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/uber.yarpc.internal.examples.streaming.Hello/HelloUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) HelloThere(ctx context.Context, opts ...grpc.CallOption) (Hello_HelloThereClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[0], "/uber.yarpc.internal.examples.streaming.Hello/HelloThere", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHelloThereClient{stream}
	return x, nil
}

type Hello_HelloThereClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHelloThereClient struct {
	grpc.ClientStream
}

func (x *helloHelloThereClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloHelloThereClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) HelloOutStream(ctx context.Context, opts ...grpc.CallOption) (Hello_HelloOutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[1], "/uber.yarpc.internal.examples.streaming.Hello/HelloOutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHelloOutStreamClient{stream}
	return x, nil
}

type Hello_HelloOutStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHelloOutStreamClient struct {
	grpc.ClientStream
}

func (x *helloHelloOutStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloHelloOutStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) HelloInStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_HelloInStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[2], "/uber.yarpc.internal.examples.streaming.Hello/HelloInStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloHelloInStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_HelloInStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloHelloInStreamClient struct {
	grpc.ClientStream
}

func (x *helloHelloInStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	HelloUnary(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloThere(Hello_HelloThereServer) error
	HelloOutStream(Hello_HelloOutStreamServer) error
	HelloInStream(*HelloRequest, Hello_HelloInStreamServer) error
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) HelloUnary(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloUnary not implemented")
}
func (*UnimplementedHelloServer) HelloThere(Hello_HelloThereServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloThere not implemented")
}
func (*UnimplementedHelloServer) HelloOutStream(Hello_HelloOutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloOutStream not implemented")
}
func (*UnimplementedHelloServer) HelloInStream(*HelloRequest, Hello_HelloInStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloInStream not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_HelloUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).HelloUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uber.yarpc.internal.examples.streaming.Hello/HelloUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).HelloUnary(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_HelloThere_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).HelloThere(&helloHelloThereServer{stream})
}

type Hello_HelloThereServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloHelloThereServer struct {
	grpc.ServerStream
}

func (x *helloHelloThereServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloHelloThereServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_HelloOutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).HelloOutStream(&helloHelloOutStreamServer{stream})
}

type Hello_HelloOutStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloHelloOutStreamServer struct {
	grpc.ServerStream
}

func (x *helloHelloOutStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloHelloOutStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_HelloInStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).HelloInStream(m, &helloHelloInStreamServer{stream})
}

type Hello_HelloInStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloHelloInStreamServer struct {
	grpc.ServerStream
}

func (x *helloHelloInStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uber.yarpc.internal.examples.streaming.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloUnary",
			Handler:    _Hello_HelloUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloThere",
			Handler:       _Hello_HelloThere_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloOutStream",
			Handler:       _Hello_HelloOutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloInStream",
			Handler:       _Hello_HelloInStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/examples/streaming/stream.proto",
}
